#include "Wire.h"
#include "MPU6050.h"
#include "I2Cdev.h"

// Define MPU for connection tests
MPU6050 accelgyro;

// Define LED pin on Arduino for functionality verification
#define LED_PIN 13
bool blinkState = false;

// I2C address of the MPU-6050
const int MPU_addr=0x68;  

// I2C address of Power Supply Managment Register of the MPU-6050
// PWR_MGMT_1
const int MPU_addr_pwr_mng=0x6B;  

// I2C address of the Accelerometer Measurement Register of the first 8 [15:8] bits of the Accerlerometer X-Output
// ACCEL_XOUT[15:8]
const int MPU_addr_accel_x_high=0x3B;  

// 16-bit integer for each sensor output

// Accelerometer X-Output
int16_t AcX;
// Accelerometer Y-Output
int16_t AcY;
// Accelerometer Z-Output
int16_t AcZ;
// Temperature Output
int16_t Tmp;
// Gyroscope X-Output
int16_t GyX;
// Gyroscope Y-Output
int16_t GyY;
// Gyroscope Z-Output
int16_t GyZ;


// 1. Set the MPU 6050 as a slave device to the Arduino master
// 2. Start the clock of the MPU 6050
// 3. Begin serial data transmission
void setup(){

  // Initiate the Wire library and join the I2C bus as a master 
  Wire.begin();
  
  // Begin a transmission to the I2C slave device with the given address.
  // Subsequently, queue bytes for transmission with the write() function.
  // Transmit write function by calling endTransmission().
  Wire.beginTransmission(MPU_addr);
  
  // Queues bytes for transmission from a master(Arduino Board) to slave device(MPU 6050)
  // Write 0 to Power Managment Register 1
  // This sets the clock source to the Internal 8MHz Oscillator
  Wire.write(MPU_addr_pwr_mng);  
  Wire.write(0);     
  
  // Ends a transmission to a slave device that was begun by beginTransmission(). 
  // Transmits the bytes that were queued by write().
  // If true, endTransmission() sends a stop message after transmission, releasing the I2C bus.
  Wire.endTransmission(true);
  
  // Initialize serial communication
  // Sets the data rate in bits per second (baud) for serial data transmission.
  Serial.begin(38400);
  
  // Initialize device
  Serial.println("Initializing I2C devices...");
  accelgyro.initialize();

  // Verify connection
  Serial.println("Testing device connections...");
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");

  // Arduino LED Configuration
  pinMode(LED_PIN, OUTPUT);
}


void loop(){

  // Begin a transmission to the I2C slave device with the given address.
  // Subsequently, queue bytes for transmission with the write() function.
  // Transmit write function by calling endTransmission().
  Wire.beginTransmission(MPU_addr);
  
  // Write to Accelerometer Measurement Register of the first 8 [15:8] bits of the Accerlerometer X-Output
  Wire.write(MPU_addr_accel_x_high);  
  
  // Ends a transmission to a slave device that was begun by beginTransmission(). 
  // Transmits the bytes that were queued by write().
  // If false, endTransmission() sends a restart message after transmission. 
  // The bus will not be released, which prevents another master device from transmitting between messages.
  // This allows one master device to send multiple transmissions while in control.
  Wire.endTransmission(false);
  
  
  // Wire.requestFrom is used by the master to request bytes from a slave device.
  // The bytes may then be retrieved with the available() and read() functions.
  // Wire.requestFrom(address, quantity, stop)
  // address: the 7-bit address of the device to request bytes from
  // quantity: the number of bytes to request
  // stop : boolean. true will send a stop message after the request, releasing the bus. false will continually send a restart after the request, keeping the connection active.
  // Requests registers 14 registers from 0x3B to 0x48
  // These registers contain the high and low bits of the sensor outputs
  Wire.requestFrom(MPU_addr,14,true);  
  
  
  // Send data from the sensor's output registers to the Arduino board.
  // Each sensor output of the MPU is contained in two registers. 
  // One register(High) holds bits [15:8]. One register (Low) holds bits [7:0]
  // <<8| is shifting the data of the high register 8 bits to the right then adding in the data of the low register
  // This function takes the two 8 bit registers and combines the data into the full 16-bit output
  // Ex:
  // Accel_x_low = cdefghij
  // Accel_x_high = 000000ab
  // Accel_x_high << 8 = ab00000000
  // Accel_x_high << 8 | Accel_x_low = abcdefghij
  // The registers containing bits [15:8] appear at 1 numerically lower register value than the registers containging [7:0]
  
  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L) 
  AcX = Wire.read() << 8 | Wire.read();  
  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcY = Wire.read() << 8 | Wire.read(); 
  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  AcZ = Wire.read() << 8 | Wire.read(); 
  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  Tmp = Wire.read() << 8 | Wire.read();  
  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyX = Wire.read() << 8 | Wire.read(); 
  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyY = Wire.read() << 8 | Wire.read();  
  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
  GyZ = Wire.read() << 8 | Wire.read();  
  
  // Serial print statements for master variables
  Serial.print("AcX = "); Serial.print(AcX);
  Serial.print(" | AcY = "); Serial.print(AcY);
  Serial.print(" | AcZ = "); Serial.print(AcZ);
  Serial.print(" | GyX = "); Serial.print(GyX);
  Serial.print(" | GyY = "); Serial.print(GyY);
  Serial.print(" | GyZ = "); Serial.println(GyZ);
  // Equation for temperature in degrees C from datasheet
  Serial.print(" | Tmp = "); Serial.print(Tmp/340.00+36.53);  
  
  // Pauses the program for 333 milliseconds
  delay(333);
}
